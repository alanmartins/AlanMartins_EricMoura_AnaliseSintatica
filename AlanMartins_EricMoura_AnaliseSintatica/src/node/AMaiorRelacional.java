/* This file was generated by SableCC (http://www.sablecc.org/). */

package node;

import analysis.*;

@SuppressWarnings("nls")
public final class AMaiorRelacional extends PRelacional
{
    private PExp _l_;
    private TMaior _maior_;
    private PExp _r_;

    public AMaiorRelacional()
    {
        // Constructor
    }

    public AMaiorRelacional(
        @SuppressWarnings("hiding") PExp _l_,
        @SuppressWarnings("hiding") TMaior _maior_,
        @SuppressWarnings("hiding") PExp _r_)
    {
        // Constructor
        setL(_l_);

        setMaior(_maior_);

        setR(_r_);

    }

    @Override
    public Object clone()
    {
        return new AMaiorRelacional(
            cloneNode(this._l_),
            cloneNode(this._maior_),
            cloneNode(this._r_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAMaiorRelacional(this);
    }

    public PExp getL()
    {
        return this._l_;
    }

    public void setL(PExp node)
    {
        if(this._l_ != null)
        {
            this._l_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._l_ = node;
    }

    public TMaior getMaior()
    {
        return this._maior_;
    }

    public void setMaior(TMaior node)
    {
        if(this._maior_ != null)
        {
            this._maior_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._maior_ = node;
    }

    public PExp getR()
    {
        return this._r_;
    }

    public void setR(PExp node)
    {
        if(this._r_ != null)
        {
            this._r_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._r_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._l_)
            + toString(this._maior_)
            + toString(this._r_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._l_ == child)
        {
            this._l_ = null;
            return;
        }

        if(this._maior_ == child)
        {
            this._maior_ = null;
            return;
        }

        if(this._r_ == child)
        {
            this._r_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._l_ == oldChild)
        {
            setL((PExp) newChild);
            return;
        }

        if(this._maior_ == oldChild)
        {
            setMaior((TMaior) newChild);
            return;
        }

        if(this._r_ == oldChild)
        {
            setR((PExp) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
