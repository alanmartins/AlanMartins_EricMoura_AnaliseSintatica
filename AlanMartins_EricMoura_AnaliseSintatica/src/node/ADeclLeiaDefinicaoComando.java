/* This file was generated by SableCC (http://www.sablecc.org/). */

package node;

import analysis.*;

@SuppressWarnings("nls")
public final class ADeclLeiaDefinicaoComando extends PDefinicaoComando
{
    private TLeia _leia_;
    private TLPar _lPar_;
    private PMultiploId _multiploId_;
    private PIdentificador _identificador_;
    private TRPar _rPar_;
    private TPontoVirgula _pontoVirgula_;

    public ADeclLeiaDefinicaoComando()
    {
        // Constructor
    }

    public ADeclLeiaDefinicaoComando(
        @SuppressWarnings("hiding") TLeia _leia_,
        @SuppressWarnings("hiding") TLPar _lPar_,
        @SuppressWarnings("hiding") PMultiploId _multiploId_,
        @SuppressWarnings("hiding") PIdentificador _identificador_,
        @SuppressWarnings("hiding") TRPar _rPar_,
        @SuppressWarnings("hiding") TPontoVirgula _pontoVirgula_)
    {
        // Constructor
        setLeia(_leia_);

        setLPar(_lPar_);

        setMultiploId(_multiploId_);

        setIdentificador(_identificador_);

        setRPar(_rPar_);

        setPontoVirgula(_pontoVirgula_);

    }

    @Override
    public Object clone()
    {
        return new ADeclLeiaDefinicaoComando(
            cloneNode(this._leia_),
            cloneNode(this._lPar_),
            cloneNode(this._multiploId_),
            cloneNode(this._identificador_),
            cloneNode(this._rPar_),
            cloneNode(this._pontoVirgula_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseADeclLeiaDefinicaoComando(this);
    }

    public TLeia getLeia()
    {
        return this._leia_;
    }

    public void setLeia(TLeia node)
    {
        if(this._leia_ != null)
        {
            this._leia_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._leia_ = node;
    }

    public TLPar getLPar()
    {
        return this._lPar_;
    }

    public void setLPar(TLPar node)
    {
        if(this._lPar_ != null)
        {
            this._lPar_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._lPar_ = node;
    }

    public PMultiploId getMultiploId()
    {
        return this._multiploId_;
    }

    public void setMultiploId(PMultiploId node)
    {
        if(this._multiploId_ != null)
        {
            this._multiploId_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._multiploId_ = node;
    }

    public PIdentificador getIdentificador()
    {
        return this._identificador_;
    }

    public void setIdentificador(PIdentificador node)
    {
        if(this._identificador_ != null)
        {
            this._identificador_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._identificador_ = node;
    }

    public TRPar getRPar()
    {
        return this._rPar_;
    }

    public void setRPar(TRPar node)
    {
        if(this._rPar_ != null)
        {
            this._rPar_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._rPar_ = node;
    }

    public TPontoVirgula getPontoVirgula()
    {
        return this._pontoVirgula_;
    }

    public void setPontoVirgula(TPontoVirgula node)
    {
        if(this._pontoVirgula_ != null)
        {
            this._pontoVirgula_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._pontoVirgula_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._leia_)
            + toString(this._lPar_)
            + toString(this._multiploId_)
            + toString(this._identificador_)
            + toString(this._rPar_)
            + toString(this._pontoVirgula_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._leia_ == child)
        {
            this._leia_ = null;
            return;
        }

        if(this._lPar_ == child)
        {
            this._lPar_ = null;
            return;
        }

        if(this._multiploId_ == child)
        {
            this._multiploId_ = null;
            return;
        }

        if(this._identificador_ == child)
        {
            this._identificador_ = null;
            return;
        }

        if(this._rPar_ == child)
        {
            this._rPar_ = null;
            return;
        }

        if(this._pontoVirgula_ == child)
        {
            this._pontoVirgula_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._leia_ == oldChild)
        {
            setLeia((TLeia) newChild);
            return;
        }

        if(this._lPar_ == oldChild)
        {
            setLPar((TLPar) newChild);
            return;
        }

        if(this._multiploId_ == oldChild)
        {
            setMultiploId((PMultiploId) newChild);
            return;
        }

        if(this._identificador_ == oldChild)
        {
            setIdentificador((PIdentificador) newChild);
            return;
        }

        if(this._rPar_ == oldChild)
        {
            setRPar((TRPar) newChild);
            return;
        }

        if(this._pontoVirgula_ == oldChild)
        {
            setPontoVirgula((TPontoVirgula) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
