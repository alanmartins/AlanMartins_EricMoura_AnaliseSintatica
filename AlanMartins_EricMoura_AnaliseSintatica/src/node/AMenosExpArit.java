/* This file was generated by SableCC (http://www.sablecc.org/). */

package node;

import analysis.*;

@SuppressWarnings("nls")
public final class AMenosExpArit extends PExpArit
{
    private PExpArit _expArit_;
    private TMenos _menos_;
    private PTermo _termo_;

    public AMenosExpArit()
    {
        // Constructor
    }

    public AMenosExpArit(
        @SuppressWarnings("hiding") PExpArit _expArit_,
        @SuppressWarnings("hiding") TMenos _menos_,
        @SuppressWarnings("hiding") PTermo _termo_)
    {
        // Constructor
        setExpArit(_expArit_);

        setMenos(_menos_);

        setTermo(_termo_);

    }

    @Override
    public Object clone()
    {
        return new AMenosExpArit(
            cloneNode(this._expArit_),
            cloneNode(this._menos_),
            cloneNode(this._termo_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAMenosExpArit(this);
    }

    public PExpArit getExpArit()
    {
        return this._expArit_;
    }

    public void setExpArit(PExpArit node)
    {
        if(this._expArit_ != null)
        {
            this._expArit_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._expArit_ = node;
    }

    public TMenos getMenos()
    {
        return this._menos_;
    }

    public void setMenos(TMenos node)
    {
        if(this._menos_ != null)
        {
            this._menos_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._menos_ = node;
    }

    public PTermo getTermo()
    {
        return this._termo_;
    }

    public void setTermo(PTermo node)
    {
        if(this._termo_ != null)
        {
            this._termo_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._termo_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._expArit_)
            + toString(this._menos_)
            + toString(this._termo_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._expArit_ == child)
        {
            this._expArit_ = null;
            return;
        }

        if(this._menos_ == child)
        {
            this._menos_ = null;
            return;
        }

        if(this._termo_ == child)
        {
            this._termo_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._expArit_ == oldChild)
        {
            setExpArit((PExpArit) newChild);
            return;
        }

        if(this._menos_ == oldChild)
        {
            setMenos((TMenos) newChild);
            return;
        }

        if(this._termo_ == oldChild)
        {
            setTermo((PTermo) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
