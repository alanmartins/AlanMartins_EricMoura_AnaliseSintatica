/* This file was generated by SableCC (http://www.sablecc.org/). */

package analysis;

import java.util.*;
import node.*;

public class ReversedDepthFirstAdapter extends AnalysisAdapter
{
    public void inStart(Start node)
    {
        defaultIn(node);
    }

    public void outStart(Start node)
    {
        defaultOut(node);
    }

    public void defaultIn(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    public void defaultOut(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    @Override
    public void caseStart(Start node)
    {
        inStart(node);
        node.getEOF().apply(this);
        node.getPProgram().apply(this);
        outStart(node);
    }

    public void inAProgram(AProgram node)
    {
        defaultIn(node);
    }

    public void outAProgram(AProgram node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAProgram(AProgram node)
    {
        inAProgram(node);
        if(node.getFim() != null)
        {
            node.getFim().apply(this);
        }
        if(node.getComando() != null)
        {
            node.getComando().apply(this);
        }
        if(node.getDeclaracao() != null)
        {
            node.getDeclaracao().apply(this);
        }
        if(node.getInicio() != null)
        {
            node.getInicio().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getPrograma() != null)
        {
            node.getPrograma().apply(this);
        }
        outAProgram(node);
    }

    public void inAUnicoDeclaracao(AUnicoDeclaracao node)
    {
        defaultIn(node);
    }

    public void outAUnicoDeclaracao(AUnicoDeclaracao node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAUnicoDeclaracao(AUnicoDeclaracao node)
    {
        inAUnicoDeclaracao(node);
        if(node.getVariavelDefinicao() != null)
        {
            node.getVariavelDefinicao().apply(this);
        }
        outAUnicoDeclaracao(node);
    }

    public void inAMultiploDeclaracao(AMultiploDeclaracao node)
    {
        defaultIn(node);
    }

    public void outAMultiploDeclaracao(AMultiploDeclaracao node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMultiploDeclaracao(AMultiploDeclaracao node)
    {
        inAMultiploDeclaracao(node);
        if(node.getVariavelDefinicao() != null)
        {
            node.getVariavelDefinicao().apply(this);
        }
        if(node.getDeclaracao() != null)
        {
            node.getDeclaracao().apply(this);
        }
        outAMultiploDeclaracao(node);
    }

    public void inAConstDeclaracao(AConstDeclaracao node)
    {
        defaultIn(node);
    }

    public void outAConstDeclaracao(AConstDeclaracao node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAConstDeclaracao(AConstDeclaracao node)
    {
        inAConstDeclaracao(node);
        if(node.getPontoVirgula() != null)
        {
            node.getPontoVirgula().apply(this);
        }
        if(node.getValor() != null)
        {
            node.getValor().apply(this);
        }
        if(node.getIdentificador() != null)
        {
            node.getIdentificador().apply(this);
        }
        if(node.getConstante() != null)
        {
            node.getConstante().apply(this);
        }
        outAConstDeclaracao(node);
    }

    public void inAVariavelDefinicao(AVariavelDefinicao node)
    {
        defaultIn(node);
    }

    public void outAVariavelDefinicao(AVariavelDefinicao node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVariavelDefinicao(AVariavelDefinicao node)
    {
        inAVariavelDefinicao(node);
        if(node.getPontoVirgula() != null)
        {
            node.getPontoVirgula().apply(this);
        }
        if(node.getIdentificador() != null)
        {
            node.getIdentificador().apply(this);
        }
        if(node.getMultiploId() != null)
        {
            node.getMultiploId().apply(this);
        }
        if(node.getDoisPontos() != null)
        {
            node.getDoisPontos().apply(this);
        }
        if(node.getTipo() != null)
        {
            node.getTipo().apply(this);
        }
        outAVariavelDefinicao(node);
    }

    public void inAUnicoIdentificador(AUnicoIdentificador node)
    {
        defaultIn(node);
    }

    public void outAUnicoIdentificador(AUnicoIdentificador node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAUnicoIdentificador(AUnicoIdentificador node)
    {
        inAUnicoIdentificador(node);
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        outAUnicoIdentificador(node);
    }

    public void inAMultiploIdentificador(AMultiploIdentificador node)
    {
        defaultIn(node);
    }

    public void outAMultiploIdentificador(AMultiploIdentificador node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMultiploIdentificador(AMultiploIdentificador node)
    {
        inAMultiploIdentificador(node);
        if(node.getRColc() != null)
        {
            node.getRColc().apply(this);
        }
        if(node.getNumInteiro() != null)
        {
            node.getNumInteiro().apply(this);
        }
        if(node.getLColc() != null)
        {
            node.getLColc().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        outAMultiploIdentificador(node);
    }

    public void inAStringValor(AStringValor node)
    {
        defaultIn(node);
    }

    public void outAStringValor(AStringValor node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAStringValor(AStringValor node)
    {
        inAStringValor(node);
        if(node.getString() != null)
        {
            node.getString().apply(this);
        }
        outAStringValor(node);
    }

    public void inAInteiroValor(AInteiroValor node)
    {
        defaultIn(node);
    }

    public void outAInteiroValor(AInteiroValor node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAInteiroValor(AInteiroValor node)
    {
        inAInteiroValor(node);
        if(node.getNumInteiro() != null)
        {
            node.getNumInteiro().apply(this);
        }
        outAInteiroValor(node);
    }

    public void inARealValor(ARealValor node)
    {
        defaultIn(node);
    }

    public void outARealValor(ARealValor node)
    {
        defaultOut(node);
    }

    @Override
    public void caseARealValor(ARealValor node)
    {
        inARealValor(node);
        if(node.getNumReal() != null)
        {
            node.getNumReal().apply(this);
        }
        outARealValor(node);
    }

    public void inATipoRealTipo(ATipoRealTipo node)
    {
        defaultIn(node);
    }

    public void outATipoRealTipo(ATipoRealTipo node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATipoRealTipo(ATipoRealTipo node)
    {
        inATipoRealTipo(node);
        if(node.getReal() != null)
        {
            node.getReal().apply(this);
        }
        outATipoRealTipo(node);
    }

    public void inATipoIntTipo(ATipoIntTipo node)
    {
        defaultIn(node);
    }

    public void outATipoIntTipo(ATipoIntTipo node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATipoIntTipo(ATipoIntTipo node)
    {
        inATipoIntTipo(node);
        if(node.getInteiro() != null)
        {
            node.getInteiro().apply(this);
        }
        outATipoIntTipo(node);
    }

    public void inATipoCaractereTipo(ATipoCaractereTipo node)
    {
        defaultIn(node);
    }

    public void outATipoCaractereTipo(ATipoCaractereTipo node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATipoCaractereTipo(ATipoCaractereTipo node)
    {
        inATipoCaractereTipo(node);
        if(node.getCaractere() != null)
        {
            node.getCaractere().apply(this);
        }
        outATipoCaractereTipo(node);
    }

    public void inAMultiIdentificador(AMultiIdentificador node)
    {
        defaultIn(node);
    }

    public void outAMultiIdentificador(AMultiIdentificador node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMultiIdentificador(AMultiIdentificador node)
    {
        inAMultiIdentificador(node);
        if(node.getVirgula() != null)
        {
            node.getVirgula().apply(this);
        }
        if(node.getIdentificador() != null)
        {
            node.getIdentificador().apply(this);
        }
        outAMultiIdentificador(node);
    }

    public void inAMultiploId(AMultiploId node)
    {
        defaultIn(node);
    }

    public void outAMultiploId(AMultiploId node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMultiploId(AMultiploId node)
    {
        inAMultiploId(node);
        {
            List<PMultiIdentificador> copy = new ArrayList<PMultiIdentificador>(node.getMultiIdentificador());
            Collections.reverse(copy);
            for(PMultiIdentificador e : copy)
            {
                e.apply(this);
            }
        }
        outAMultiploId(node);
    }

    public void inAUnicoComando(AUnicoComando node)
    {
        defaultIn(node);
    }

    public void outAUnicoComando(AUnicoComando node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAUnicoComando(AUnicoComando node)
    {
        inAUnicoComando(node);
        if(node.getDefinicaoComando() != null)
        {
            node.getDefinicaoComando().apply(this);
        }
        outAUnicoComando(node);
    }

    public void inAMultiploComando(AMultiploComando node)
    {
        defaultIn(node);
    }

    public void outAMultiploComando(AMultiploComando node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMultiploComando(AMultiploComando node)
    {
        inAMultiploComando(node);
        if(node.getDefinicaoComando() != null)
        {
            node.getDefinicaoComando().apply(this);
        }
        if(node.getComando() != null)
        {
            node.getComando().apply(this);
        }
        outAMultiploComando(node);
    }

    public void inACmdAtribuicaoDefinicaoComando(ACmdAtribuicaoDefinicaoComando node)
    {
        defaultIn(node);
    }

    public void outACmdAtribuicaoDefinicaoComando(ACmdAtribuicaoDefinicaoComando node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACmdAtribuicaoDefinicaoComando(ACmdAtribuicaoDefinicaoComando node)
    {
        inACmdAtribuicaoDefinicaoComando(node);
        if(node.getPontoVirgula() != null)
        {
            node.getPontoVirgula().apply(this);
        }
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        if(node.getAtribuicao() != null)
        {
            node.getAtribuicao().apply(this);
        }
        if(node.getIdentificador() != null)
        {
            node.getIdentificador().apply(this);
        }
        outACmdAtribuicaoDefinicaoComando(node);
    }

    public void inADeclLeiaDefinicaoComando(ADeclLeiaDefinicaoComando node)
    {
        defaultIn(node);
    }

    public void outADeclLeiaDefinicaoComando(ADeclLeiaDefinicaoComando node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADeclLeiaDefinicaoComando(ADeclLeiaDefinicaoComando node)
    {
        inADeclLeiaDefinicaoComando(node);
        if(node.getPontoVirgula() != null)
        {
            node.getPontoVirgula().apply(this);
        }
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        if(node.getIdentificador() != null)
        {
            node.getIdentificador().apply(this);
        }
        if(node.getMultiploId() != null)
        {
            node.getMultiploId().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        if(node.getLeia() != null)
        {
            node.getLeia().apply(this);
        }
        outADeclLeiaDefinicaoComando(node);
    }

    public void inADeclEscrevaDefinicaoComando(ADeclEscrevaDefinicaoComando node)
    {
        defaultIn(node);
    }

    public void outADeclEscrevaDefinicaoComando(ADeclEscrevaDefinicaoComando node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADeclEscrevaDefinicaoComando(ADeclEscrevaDefinicaoComando node)
    {
        inADeclEscrevaDefinicaoComando(node);
        if(node.getPontoVirgula() != null)
        {
            node.getPontoVirgula().apply(this);
        }
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        if(node.getMultiplaExp() != null)
        {
            node.getMultiplaExp().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        if(node.getEscreva() != null)
        {
            node.getEscreva().apply(this);
        }
        outADeclEscrevaDefinicaoComando(node);
    }

    public void inADeclAvalieDefinicaoComando(ADeclAvalieDefinicaoComando node)
    {
        defaultIn(node);
    }

    public void outADeclAvalieDefinicaoComando(ADeclAvalieDefinicaoComando node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADeclAvalieDefinicaoComando(ADeclAvalieDefinicaoComando node)
    {
        inADeclAvalieDefinicaoComando(node);
        if(node.getPontoVirgula() != null)
        {
            node.getPontoVirgula().apply(this);
        }
        if(node.getFimAvalie() != null)
        {
            node.getFimAvalie().apply(this);
        }
        if(node.getOpcionalSenaoCaso() != null)
        {
            node.getOpcionalSenaoCaso().apply(this);
        }
        if(node.getMultiploCaso() != null)
        {
            node.getMultiploCaso().apply(this);
        }
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        if(node.getAvalie() != null)
        {
            node.getAvalie().apply(this);
        }
        outADeclAvalieDefinicaoComando(node);
    }

    public void inADeclEnquantoDefinicaoComando(ADeclEnquantoDefinicaoComando node)
    {
        defaultIn(node);
    }

    public void outADeclEnquantoDefinicaoComando(ADeclEnquantoDefinicaoComando node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADeclEnquantoDefinicaoComando(ADeclEnquantoDefinicaoComando node)
    {
        inADeclEnquantoDefinicaoComando(node);
        if(node.getPontoVirgula() != null)
        {
            node.getPontoVirgula().apply(this);
        }
        if(node.getFimEnquanto() != null)
        {
            node.getFimEnquanto().apply(this);
        }
        if(node.getComando() != null)
        {
            node.getComando().apply(this);
        }
        if(node.getFaca() != null)
        {
            node.getFaca().apply(this);
        }
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        if(node.getExpLogica() != null)
        {
            node.getExpLogica().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        if(node.getEnquanto() != null)
        {
            node.getEnquanto().apply(this);
        }
        outADeclEnquantoDefinicaoComando(node);
    }

    public void inADeclRepitaDefinicaoComando(ADeclRepitaDefinicaoComando node)
    {
        defaultIn(node);
    }

    public void outADeclRepitaDefinicaoComando(ADeclRepitaDefinicaoComando node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADeclRepitaDefinicaoComando(ADeclRepitaDefinicaoComando node)
    {
        inADeclRepitaDefinicaoComando(node);
        if(node.getPontoVirgula() != null)
        {
            node.getPontoVirgula().apply(this);
        }
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        if(node.getExpLogica() != null)
        {
            node.getExpLogica().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        if(node.getAte() != null)
        {
            node.getAte().apply(this);
        }
        if(node.getComando() != null)
        {
            node.getComando().apply(this);
        }
        if(node.getRepita() != null)
        {
            node.getRepita().apply(this);
        }
        outADeclRepitaDefinicaoComando(node);
    }

    public void inADeclParaAteDefinicaoComando(ADeclParaAteDefinicaoComando node)
    {
        defaultIn(node);
    }

    public void outADeclParaAteDefinicaoComando(ADeclParaAteDefinicaoComando node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADeclParaAteDefinicaoComando(ADeclParaAteDefinicaoComando node)
    {
        inADeclParaAteDefinicaoComando(node);
        if(node.getPontoVirgula() != null)
        {
            node.getPontoVirgula().apply(this);
        }
        if(node.getFimPara() != null)
        {
            node.getFimPara().apply(this);
        }
        if(node.getComando() != null)
        {
            node.getComando().apply(this);
        }
        if(node.getFaca() != null)
        {
            node.getFaca().apply(this);
        }
        if(node.getInt() != null)
        {
            node.getInt().apply(this);
        }
        if(node.getAte() != null)
        {
            node.getAte().apply(this);
        }
        if(node.getNumInteiro() != null)
        {
            node.getNumInteiro().apply(this);
        }
        if(node.getDe() != null)
        {
            node.getDe().apply(this);
        }
        if(node.getIdentificador() != null)
        {
            node.getIdentificador().apply(this);
        }
        if(node.getPara() != null)
        {
            node.getPara().apply(this);
        }
        outADeclParaAteDefinicaoComando(node);
    }

    public void inADeclParaPassoDefinicaoComando(ADeclParaPassoDefinicaoComando node)
    {
        defaultIn(node);
    }

    public void outADeclParaPassoDefinicaoComando(ADeclParaPassoDefinicaoComando node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADeclParaPassoDefinicaoComando(ADeclParaPassoDefinicaoComando node)
    {
        inADeclParaPassoDefinicaoComando(node);
        if(node.getPontoVirgula() != null)
        {
            node.getPontoVirgula().apply(this);
        }
        if(node.getFimPara() != null)
        {
            node.getFimPara().apply(this);
        }
        if(node.getComando() != null)
        {
            node.getComando().apply(this);
        }
        if(node.getFaca() != null)
        {
            node.getFaca().apply(this);
        }
        if(node.getNInt() != null)
        {
            node.getNInt().apply(this);
        }
        if(node.getAte() != null)
        {
            node.getAte().apply(this);
        }
        if(node.getInt() != null)
        {
            node.getInt().apply(this);
        }
        if(node.getPasso() != null)
        {
            node.getPasso().apply(this);
        }
        if(node.getNumInteiro() != null)
        {
            node.getNumInteiro().apply(this);
        }
        if(node.getDe() != null)
        {
            node.getDe().apply(this);
        }
        if(node.getIdentificador() != null)
        {
            node.getIdentificador().apply(this);
        }
        if(node.getPara() != null)
        {
            node.getPara().apply(this);
        }
        outADeclParaPassoDefinicaoComando(node);
    }

    public void inADeclSeDefinicaoComando(ADeclSeDefinicaoComando node)
    {
        defaultIn(node);
    }

    public void outADeclSeDefinicaoComando(ADeclSeDefinicaoComando node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADeclSeDefinicaoComando(ADeclSeDefinicaoComando node)
    {
        inADeclSeDefinicaoComando(node);
        if(node.getPontoVirgula() != null)
        {
            node.getPontoVirgula().apply(this);
        }
        if(node.getFimSe() != null)
        {
            node.getFimSe().apply(this);
        }
        if(node.getOpcionalSenaoSe() != null)
        {
            node.getOpcionalSenaoSe().apply(this);
        }
        if(node.getComando() != null)
        {
            node.getComando().apply(this);
        }
        if(node.getEntao() != null)
        {
            node.getEntao().apply(this);
        }
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        if(node.getExpLogica() != null)
        {
            node.getExpLogica().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        if(node.getSe() != null)
        {
            node.getSe().apply(this);
        }
        outADeclSeDefinicaoComando(node);
    }

    public void inAOpcionalSenaoSe(AOpcionalSenaoSe node)
    {
        defaultIn(node);
    }

    public void outAOpcionalSenaoSe(AOpcionalSenaoSe node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAOpcionalSenaoSe(AOpcionalSenaoSe node)
    {
        inAOpcionalSenaoSe(node);
        if(node.getSenaoSe() != null)
        {
            node.getSenaoSe().apply(this);
        }
        outAOpcionalSenaoSe(node);
    }

    public void inASenaoSe(ASenaoSe node)
    {
        defaultIn(node);
    }

    public void outASenaoSe(ASenaoSe node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASenaoSe(ASenaoSe node)
    {
        inASenaoSe(node);
        if(node.getComando() != null)
        {
            node.getComando().apply(this);
        }
        if(node.getSenao() != null)
        {
            node.getSenao().apply(this);
        }
        outASenaoSe(node);
    }

    public void inAOpcionalSenaoCaso(AOpcionalSenaoCaso node)
    {
        defaultIn(node);
    }

    public void outAOpcionalSenaoCaso(AOpcionalSenaoCaso node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAOpcionalSenaoCaso(AOpcionalSenaoCaso node)
    {
        inAOpcionalSenaoCaso(node);
        if(node.getSenaoCaso() != null)
        {
            node.getSenaoCaso().apply(this);
        }
        outAOpcionalSenaoCaso(node);
    }

    public void inASenaoCaso(ASenaoCaso node)
    {
        defaultIn(node);
    }

    public void outASenaoCaso(ASenaoCaso node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASenaoCaso(ASenaoCaso node)
    {
        inASenaoCaso(node);
        if(node.getComando() != null)
        {
            node.getComando().apply(this);
        }
        if(node.getDoisPontos() != null)
        {
            node.getDoisPontos().apply(this);
        }
        if(node.getSenao() != null)
        {
            node.getSenao().apply(this);
        }
        outASenaoCaso(node);
    }

    public void inAMultiploCaso(AMultiploCaso node)
    {
        defaultIn(node);
    }

    public void outAMultiploCaso(AMultiploCaso node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMultiploCaso(AMultiploCaso node)
    {
        inAMultiploCaso(node);
        {
            List<PDefinicaoCaso> copy = new ArrayList<PDefinicaoCaso>(node.getDefinicaoCaso());
            Collections.reverse(copy);
            for(PDefinicaoCaso e : copy)
            {
                e.apply(this);
            }
        }
        outAMultiploCaso(node);
    }

    public void inADefinicaoCaso(ADefinicaoCaso node)
    {
        defaultIn(node);
    }

    public void outADefinicaoCaso(ADefinicaoCaso node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADefinicaoCaso(ADefinicaoCaso node)
    {
        inADefinicaoCaso(node);
        if(node.getComando() != null)
        {
            node.getComando().apply(this);
        }
        if(node.getDoisPontos() != null)
        {
            node.getDoisPontos().apply(this);
        }
        if(node.getValor() != null)
        {
            node.getValor().apply(this);
        }
        if(node.getCaso() != null)
        {
            node.getCaso().apply(this);
        }
        outADefinicaoCaso(node);
    }

    public void inAMultiExp(AMultiExp node)
    {
        defaultIn(node);
    }

    public void outAMultiExp(AMultiExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMultiExp(AMultiExp node)
    {
        inAMultiExp(node);
        if(node.getVirgula() != null)
        {
            node.getVirgula().apply(this);
        }
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        outAMultiExp(node);
    }

    public void inAMultiplaExp(AMultiplaExp node)
    {
        defaultIn(node);
    }

    public void outAMultiplaExp(AMultiplaExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMultiplaExp(AMultiplaExp node)
    {
        inAMultiplaExp(node);
        {
            List<PMultiExp> copy = new ArrayList<PMultiExp>(node.getMultiExp());
            Collections.reverse(copy);
            for(PMultiExp e : copy)
            {
                e.apply(this);
            }
        }
        outAMultiplaExp(node);
    }

    public void inAMenosExpExp(AMenosExpExp node)
    {
        defaultIn(node);
    }

    public void outAMenosExpExp(AMenosExpExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMenosExpExp(AMenosExpExp node)
    {
        inAMenosExpExp(node);
        if(node.getExpArit() != null)
        {
            node.getExpArit().apply(this);
        }
        if(node.getMenos() != null)
        {
            node.getMenos().apply(this);
        }
        outAMenosExpExp(node);
    }

    public void inAExpAritmeticaExp(AExpAritmeticaExp node)
    {
        defaultIn(node);
    }

    public void outAExpAritmeticaExp(AExpAritmeticaExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExpAritmeticaExp(AExpAritmeticaExp node)
    {
        inAExpAritmeticaExp(node);
        if(node.getExpArit() != null)
        {
            node.getExpArit().apply(this);
        }
        outAExpAritmeticaExp(node);
    }

    public void inATermoExpArit(ATermoExpArit node)
    {
        defaultIn(node);
    }

    public void outATermoExpArit(ATermoExpArit node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATermoExpArit(ATermoExpArit node)
    {
        inATermoExpArit(node);
        if(node.getTermo() != null)
        {
            node.getTermo().apply(this);
        }
        outATermoExpArit(node);
    }

    public void inAMaisExpArit(AMaisExpArit node)
    {
        defaultIn(node);
    }

    public void outAMaisExpArit(AMaisExpArit node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMaisExpArit(AMaisExpArit node)
    {
        inAMaisExpArit(node);
        if(node.getTermo() != null)
        {
            node.getTermo().apply(this);
        }
        if(node.getMais() != null)
        {
            node.getMais().apply(this);
        }
        if(node.getExpArit() != null)
        {
            node.getExpArit().apply(this);
        }
        outAMaisExpArit(node);
    }

    public void inAMenosExpArit(AMenosExpArit node)
    {
        defaultIn(node);
    }

    public void outAMenosExpArit(AMenosExpArit node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMenosExpArit(AMenosExpArit node)
    {
        inAMenosExpArit(node);
        if(node.getTermo() != null)
        {
            node.getTermo().apply(this);
        }
        if(node.getMenos() != null)
        {
            node.getMenos().apply(this);
        }
        if(node.getExpArit() != null)
        {
            node.getExpArit().apply(this);
        }
        outAMenosExpArit(node);
    }

    public void inAFatorTermo(AFatorTermo node)
    {
        defaultIn(node);
    }

    public void outAFatorTermo(AFatorTermo node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFatorTermo(AFatorTermo node)
    {
        inAFatorTermo(node);
        if(node.getFator() != null)
        {
            node.getFator().apply(this);
        }
        outAFatorTermo(node);
    }

    public void inAMultiplicacaoTermo(AMultiplicacaoTermo node)
    {
        defaultIn(node);
    }

    public void outAMultiplicacaoTermo(AMultiplicacaoTermo node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMultiplicacaoTermo(AMultiplicacaoTermo node)
    {
        inAMultiplicacaoTermo(node);
        if(node.getFator() != null)
        {
            node.getFator().apply(this);
        }
        if(node.getMult() != null)
        {
            node.getMult().apply(this);
        }
        if(node.getTermo() != null)
        {
            node.getTermo().apply(this);
        }
        outAMultiplicacaoTermo(node);
    }

    public void inADivisaoTermo(ADivisaoTermo node)
    {
        defaultIn(node);
    }

    public void outADivisaoTermo(ADivisaoTermo node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADivisaoTermo(ADivisaoTermo node)
    {
        inADivisaoTermo(node);
        if(node.getFator() != null)
        {
            node.getFator().apply(this);
        }
        if(node.getDiv() != null)
        {
            node.getDiv().apply(this);
        }
        if(node.getTermo() != null)
        {
            node.getTermo().apply(this);
        }
        outADivisaoTermo(node);
    }

    public void inAIdentificadorFator(AIdentificadorFator node)
    {
        defaultIn(node);
    }

    public void outAIdentificadorFator(AIdentificadorFator node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIdentificadorFator(AIdentificadorFator node)
    {
        inAIdentificadorFator(node);
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        outAIdentificadorFator(node);
    }

    public void inAValorFator(AValorFator node)
    {
        defaultIn(node);
    }

    public void outAValorFator(AValorFator node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAValorFator(AValorFator node)
    {
        inAValorFator(node);
        if(node.getValor() != null)
        {
            node.getValor().apply(this);
        }
        outAValorFator(node);
    }

    public void inAExpFator(AExpFator node)
    {
        defaultIn(node);
    }

    public void outAExpFator(AExpFator node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExpFator(AExpFator node)
    {
        inAExpFator(node);
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        if(node.getExpArit() != null)
        {
            node.getExpArit().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        outAExpFator(node);
    }

    public void inANaoExpLogica(ANaoExpLogica node)
    {
        defaultIn(node);
    }

    public void outANaoExpLogica(ANaoExpLogica node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANaoExpLogica(ANaoExpLogica node)
    {
        inANaoExpLogica(node);
        if(node.getLogica() != null)
        {
            node.getLogica().apply(this);
        }
        if(node.getNao() != null)
        {
            node.getNao().apply(this);
        }
        outANaoExpLogica(node);
    }

    public void inALogicaExpLogica(ALogicaExpLogica node)
    {
        defaultIn(node);
    }

    public void outALogicaExpLogica(ALogicaExpLogica node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALogicaExpLogica(ALogicaExpLogica node)
    {
        inALogicaExpLogica(node);
        if(node.getLogica() != null)
        {
            node.getLogica().apply(this);
        }
        outALogicaExpLogica(node);
    }

    public void inAELogica(AELogica node)
    {
        defaultIn(node);
    }

    public void outAELogica(AELogica node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAELogica(AELogica node)
    {
        inAELogica(node);
        if(node.getRelacional() != null)
        {
            node.getRelacional().apply(this);
        }
        if(node.getE() != null)
        {
            node.getE().apply(this);
        }
        if(node.getLogica() != null)
        {
            node.getLogica().apply(this);
        }
        outAELogica(node);
    }

    public void inAOuLogica(AOuLogica node)
    {
        defaultIn(node);
    }

    public void outAOuLogica(AOuLogica node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAOuLogica(AOuLogica node)
    {
        inAOuLogica(node);
        if(node.getRelacional() != null)
        {
            node.getRelacional().apply(this);
        }
        if(node.getOu() != null)
        {
            node.getOu().apply(this);
        }
        if(node.getLogica() != null)
        {
            node.getLogica().apply(this);
        }
        outAOuLogica(node);
    }

    public void inAXouLogica(AXouLogica node)
    {
        defaultIn(node);
    }

    public void outAXouLogica(AXouLogica node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAXouLogica(AXouLogica node)
    {
        inAXouLogica(node);
        if(node.getRelacional() != null)
        {
            node.getRelacional().apply(this);
        }
        if(node.getXou() != null)
        {
            node.getXou().apply(this);
        }
        if(node.getLogica() != null)
        {
            node.getLogica().apply(this);
        }
        outAXouLogica(node);
    }

    public void inARelacionalLogica(ARelacionalLogica node)
    {
        defaultIn(node);
    }

    public void outARelacionalLogica(ARelacionalLogica node)
    {
        defaultOut(node);
    }

    @Override
    public void caseARelacionalLogica(ARelacionalLogica node)
    {
        inARelacionalLogica(node);
        if(node.getRelacional() != null)
        {
            node.getRelacional().apply(this);
        }
        outARelacionalLogica(node);
    }

    public void inAIgualRelacional(AIgualRelacional node)
    {
        defaultIn(node);
    }

    public void outAIgualRelacional(AIgualRelacional node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIgualRelacional(AIgualRelacional node)
    {
        inAIgualRelacional(node);
        if(node.getR() != null)
        {
            node.getR().apply(this);
        }
        if(node.getIgual() != null)
        {
            node.getIgual().apply(this);
        }
        if(node.getL() != null)
        {
            node.getL().apply(this);
        }
        outAIgualRelacional(node);
    }

    public void inADiferenteRelacional(ADiferenteRelacional node)
    {
        defaultIn(node);
    }

    public void outADiferenteRelacional(ADiferenteRelacional node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADiferenteRelacional(ADiferenteRelacional node)
    {
        inADiferenteRelacional(node);
        if(node.getR() != null)
        {
            node.getR().apply(this);
        }
        if(node.getDiferente() != null)
        {
            node.getDiferente().apply(this);
        }
        if(node.getL() != null)
        {
            node.getL().apply(this);
        }
        outADiferenteRelacional(node);
    }

    public void inAMenorIgualRelacional(AMenorIgualRelacional node)
    {
        defaultIn(node);
    }

    public void outAMenorIgualRelacional(AMenorIgualRelacional node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMenorIgualRelacional(AMenorIgualRelacional node)
    {
        inAMenorIgualRelacional(node);
        if(node.getR() != null)
        {
            node.getR().apply(this);
        }
        if(node.getMenorIgual() != null)
        {
            node.getMenorIgual().apply(this);
        }
        if(node.getL() != null)
        {
            node.getL().apply(this);
        }
        outAMenorIgualRelacional(node);
    }

    public void inAMaiorIgualRelacional(AMaiorIgualRelacional node)
    {
        defaultIn(node);
    }

    public void outAMaiorIgualRelacional(AMaiorIgualRelacional node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMaiorIgualRelacional(AMaiorIgualRelacional node)
    {
        inAMaiorIgualRelacional(node);
        if(node.getR() != null)
        {
            node.getR().apply(this);
        }
        if(node.getMaiorIgual() != null)
        {
            node.getMaiorIgual().apply(this);
        }
        if(node.getL() != null)
        {
            node.getL().apply(this);
        }
        outAMaiorIgualRelacional(node);
    }

    public void inAMenorRelacional(AMenorRelacional node)
    {
        defaultIn(node);
    }

    public void outAMenorRelacional(AMenorRelacional node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMenorRelacional(AMenorRelacional node)
    {
        inAMenorRelacional(node);
        if(node.getR() != null)
        {
            node.getR().apply(this);
        }
        if(node.getMenor() != null)
        {
            node.getMenor().apply(this);
        }
        if(node.getL() != null)
        {
            node.getL().apply(this);
        }
        outAMenorRelacional(node);
    }

    public void inAMaiorRelacional(AMaiorRelacional node)
    {
        defaultIn(node);
    }

    public void outAMaiorRelacional(AMaiorRelacional node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMaiorRelacional(AMaiorRelacional node)
    {
        inAMaiorRelacional(node);
        if(node.getR() != null)
        {
            node.getR().apply(this);
        }
        if(node.getMaior() != null)
        {
            node.getMaior().apply(this);
        }
        if(node.getL() != null)
        {
            node.getL().apply(this);
        }
        outAMaiorRelacional(node);
    }
}
